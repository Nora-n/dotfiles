\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{custikz}

% Utilisation de tikz
\RequirePackage{tikz}
\usetikzlibrary{arrows, arrows.meta}
\usetikzlibrary{angles, bending, calc, fadings, intersections,
	patterns, patterns.meta, positioning, plotmarks, quotes, trees,
	backgrounds, matrix, math}
\usetikzlibrary{shapes,
	shapes.misc,
	shapes.geometric}
\usetikzlibrary{decorations.markings,
	decorations.pathmorphing,
	decorations.pathreplacing}
\RequirePackage[european, straightvoltages, cuteinductors]{circuitikz}
\ctikzset{bipoles/thickness=1}
\ctikzset{grounds/thickness=1}
\ctikzset{bipoles/cuteswitch/thickness=0.5}
\usetikzlibrary{babel}
\usetikzlibrary{optics}
\usetikzlibrary{3d}
\RequirePackage{tikz-3dplot}
\RequirePackage{sankey}
\usetikzlibrary{chains}

\tikzset{
	cross/.style={
			cross out, draw=black, fill=none, minimum
			size=2*(#1-\pgflinewidth), inner sep=0pt, outer sep=0pt},
	cross/.default={2pt}}

% Allows a loop parameter like {draw,fill=white} to be passed with
% \node[expend style=\loopparam]
% https://tex.stackexchange.com/a/523738/284518
\tikzset{%
	set style/.style={#1},
	expand style/.style={
			set style/.expanded={#1}
		}
}
% Rounded arrows, inspired by https://tex.stackexchange.com/a/95223
\def\circledarrowcw#1#2#3{ % #1 Style, #2 Center, #3 Radius
	\draw[#1,->] #2 + (80:#3) arc(80:-260:#3);}
\def\circledarrow#1#2#3{ % #1 Style, #2 Center, #3 Radius
	\draw[#1,->] #2 + (110:#3) arc(110:440:#3);}

% For wavy lines
\tikzset{Snake/.style={decorate, decoration={snake}}}

% For arrow on ellipse
\tikzset{% inspired by https://tex.stackexchange.com/a/316050/121799
arc arrow/.style args={%
to pos #1 with length #2}{
decoration={
markings,
mark=at position 0 with {\pgfextra{%
			\pgfmathsetmacro{\tmpArrowTime}{#2/(\pgfdecoratedpathlength)}
			\xdef\tmpArrowTime{\tmpArrowTime}}},
mark=at position {#1-\tmpArrowTime} with {\coordinate(@1);},
mark=at position {#1-2*\tmpArrowTime/3} with {\coordinate(@2);},
mark=at position {#1-\tmpArrowTime/3} with {\coordinate(@3);},
mark=at position {#1} with {\coordinate(@4);
\draw[-{Stealth[length=#2,bend]}]
(@1) .. controls (@2) and (@3) .. (@4);},
},
postaction=decorate,
},bent arrow/.style={arc arrow=to pos #1 with length 2mm},
pics/strange bar/.style={code={\draw[thick] (-#1,0) -- (#1,0);}}
}

% Tor place nodes on function giving x or y coordinate only
% https://tex.stackexchange.com/a/88421/284518
\makeatletter
\def\parsenode[#1]#2\pgf@nil{%
	\tikzset{label node/.style={#1}}
\def\nodetext{#2}
}

\tikzset{
	add node at x/.style 2 args={
			name path global=plot line,
			/pgfplots/execute at end plot visualization/.append={
					\begingroup
					\@ifnextchar[{\parsenode}{\parsenode[]}#2\pgf@nil
					\path [name path global = position line #1-1]
					({axis cs:#1,0}|-{rel axis cs:0,0}) --
					({axis cs:#1,0}|-{rel axis cs:0,1});
					\path [xshift=1pt, name path global = position line #1-2]
					({axis cs:#1,0}|-{rel axis cs:0,0}) --
					({axis cs:#1,0}|-{rel axis cs:0,1});
					\path [
						name intersections={
								of={plot line and position line #1-1},
								name=left intersection
							},
						name intersections={
								of={plot line and position line #1-2},
								name=right intersection
							},
						label node/.append style={pos=1}
					] (left intersection-1) -- (right intersection-1)
					node [label node]{\nodetext};
					\endgroup
				}
		},
	add node at y/.style 2 args={
			name path global=plot line,
			/pgfplots/execute at end plot visualization/.append={
					\begingroup
					\@ifnextchar[{\parsenode}{\parsenode[]}#2\pgf@nil
					\path [name path global = position line #1-1]
					({axis cs:0,#1}-|{rel axis cs:0,0}) --
					({axis cs:0,#1}-|{rel axis cs:1,1});
					\path [yshift=1pt, name path global = position line #1-2]
					({axis cs:0,#1}-|{rel axis cs:0,0}) --
					({axis cs:0,#1}-|{rel axis cs:1,1});
					\path [
						name intersections={
								of={plot line and position line #1-1},
								name=left intersection
							},
						name intersections={
								of={plot line and position line #1-2},
								name=right intersection
							},
						label node/.append style={pos=1}
					] (left intersection-1) -- (right intersection-1)
					node [label node] {\nodetext};
					\endgroup
				}
		}
}
\makeatother

% SOON TO BE OBSOLETE: to place labels in european resistors
% \makeatletter
% \newcommand*{\shifttext}[2]{%
%   \settowidth{\@tempdima}{#2}%
%   \makebox[\@tempdima]{\hspace*{#1}#2}%
% }
% \makeatother

% For intensity and voltage colored arrows in circuitikz
\newcommand{\iarronly}[1]{% name
	\node [currarrow, color=brandeisblue, anchor=center, scale=.75,
		rotate=\ctikzgetdirection{#1-Iarrow}] at (#1-Ipos) {};
}
\newcommand{\varronly}[1]{% name
	\draw [color=red!70] (#1-Vfrom) .. controls (#1-Vcont1)
	and (#1-Vcont2).. (#1-Vto) node [currarrow, scale=.75,
			sloped, anchor=tip, allow upside down,pos=1]{};
}
% NEED CIRCUITIKZ V. 1.4.3, and corresponding PGF etc
\ctikzset{!vi/.style={no v symbols, no i symbols}}
\ctikzset{bipole voltage style/.style={color=red!70},
	bipole current style/.style={color=brandeisblue}}

% To have circuitikz lines aligned with text
\tikzset{baseline={([yshift=-0.5ex]current bounding box.center)}}

% To draw tangent lines on \draw commands
% https://tex.stackexchange.com/a/25940
\tikzset{
	tangentdrw/.style={
			decoration={
					markings,% switch on markings
					mark= at position #1 with
						{\coordinate
							(tangentdrw point-\pgfkeysvalueof{/pgf/decoration/mark info/sequence number})
							at (0pt,0pt);
							\coordinate
							(tangentdrw unit vector-\pgfkeysvalueof{/pgf/decoration/mark info/sequence number})
							at (1,0pt);
							\coordinate
							(tangentdrw orthogonal unit vector-\pgfkeysvalueof{/pgf/decoration/mark info/sequence number})
							at (0pt,1);}
				},
			postaction=decorate
		},
	use tangentdrw/.style={
			shift=(tangentdrw point-#1),
			x=(tangentdrw unit vector-#1),
			y=(tangentdrw orthogonal unit vector-#1)
		},
	use tangentdrw/.default=1}

% % To draw tangent lines on \addplot
% % https://tex.stackexchange.com/a/292865
\colorlet{Tangent}{black}
\makeatletter
\def\parsenode[#1]#2\pgf@nil{%
	\tikzset{label node/.style={#1}}
\def\nodetext{#2}
}
\tikzset{
	% define style for the points
	Point/.style={
			shape=circle,
			inner sep=0pt,
			minimum size=3pt,
		},
	add node at x/.style 2 args={
			name path global=plot line,
			/pgfplots/execute at end plot visualization/.append={
					\begingroup
					\@ifnextchar[{\parsenode}{\parsenode[]}\pgf@nil
					\path [name path global = position line #1-1]
					({axis cs:#1,0}|-{rel axis cs:0,0}) --
					({axis cs:#1,0}|-{rel axis cs:0,1});
					\path [xshift=1pt, name path global = position line #1-2]
					({axis cs:#1,0}|-{rel axis cs:0,0}) --
					({axis cs:#1,0}|-{rel axis cs:0,1});
					\path [
						name intersections={
								of={plot line and position line #1-1},
								name=left intersection
							},
						name intersections={
								of={plot line and position line #1-2},
								name=right intersection
							},
						label node/.append style={pos=1}
					] (left intersection-1) -- (right intersection-1)
					node [label node]{\nodetext};
					% ---------------------------------------------------------
					% draw the tangent line from a bit right of the point on
					% the curve to the intersection with the ordinate
					% and draw the corresponding points
					\draw [Tangent] let
					\p1=($ (left intersection-1) - (right intersection-1) $),
					\p2=($ (left intersection-1)!sign(#1)*#2 cm!(right intersection-1) $),
					\p3=($ ({axis cs:0,0}) - (\p2) $),
					\n1={\x3/\x1}
					in
					(\p2) -- +($ {\n1}*(\x1,\y1) $)
					%                            node [Point,fill=Tangent] (origin intersection) {}
					%                            node [Point,fill=Curve] at (left intersection-1) {}
					;
					%                    % ----------
					%                    % draw the horizontal line at the curve intersection point
					%                    % plus the label above/below the line
					%                    \tikzmath{
					%                        coordinate \c1;
					%                        \c1=(left intersection-1) - (right intersection-1);
					%                        \slope=\cy1/\cx1*sign(#1);
					%                    }
					%                    \pgfmathsetmacro{\AboveBelow}{ \slope>0 ? "above" : "below" }
					%                    \draw [dotted]
					%                        ([xshift=sign(#1)*2.5mm] left intersection-1) --
					%                        (left intersection-1) --
					%                            node [\AboveBelow,node font=\scriptsize] {$f(x)$}
					%                        (left intersection-1 -| origin intersection) --
					%                        +($ sign(#1)*(-2.5mm,0) $)
					%                            coordinate [pos=0.5] (a)
					%                    ;
					%                    % draw the horizontal line at the ordinate intersection point
					%                    \draw [dotted] (origin intersection)
					%                        +($ sign(#1)*(-2.5mm,0) $) --
					%                        (origin intersection);
					%                    % draw vertical line left/right of the ordinate
					%                    \pgfmathsetmacro{\LeftRight}{ #1<0 ? "right" : "left" }
					%                    \draw [stealth-stealth] (origin intersection)
					%                        +($ sign(#1)*(-1.25mm,0) $) -- (a)
					%                            node [midway,\LeftRight,node font=\scriptsize] {$p$}
					%                    ;
					%                    % ---------------------------------------------------------
					\endgroup
				},
		},
}
\makeatother

% Length calculation from https://tex.stackexchange.com/a/412901
\makeatletter
\newcommand{\len}[3]{% % from https://tex.stackexchange.com/q/56353/121799
	\tikz@scan@one@point\pgfutil@firstofone($#1-#2$)\relax
	\pgfmathsetmacro{#3}{round(0.99626*veclen(\the\pgf@x,\the\pgf@y)/0.0283465)/1000}
}% Explanation: the calc library allows us, among other things, to add and
% subtract points, so ($#1-#2$) is simply the difference between the points
% #1 and #2. The combination \tikz@scan@one@point\pgfutil@firstofone extracts
% the coordinates of the new point and stores them in \pgf@x and \pgf@y.
% They get fed in veclen, and \pgfmathsetmacro stores the result in #3.
% EDIT: included fudge factor, see https://tex.stackexchange.com/a/22702/121799
\makeatother

% Angle calculation from https://tex.stackexchange.com/a/39325
\newcommand{\pgfextractangle}[3]{%
	\pgfmathanglebetweenpoints{\pgfpointanchor{#2}{center}}
	{\pgfpointanchor{#3}{center}}
	\global\let#1\pgfmathresult
}

% Compute real distances to print in SI, https://tex.stackexchange.com/q/114641
\newcommand{\mult}[2]{%
	\FPmul{\tempSum}{#1}{#2}%
	\FPround\roundedSum\tempSum2%
	\roundedSum%
}

% Extract x and y coordinate
% https://tex.stackexchange.com/a/66129/284518
%% https://tex.stackexchange.com/questions/86897/recover-scaling-factor-in-tikz
\newcommand*\getscale[1]{%
	\begingroup
	\pgfgettransformentries{\scaleA}{\scaleB}{\scaleC}{\scaleD}{\whatevs}{\whatevs}%
	\pgfmathsetmacro{#1}{sqrt(abs(\scaleA*\scaleD-\scaleB*\scaleC))}%
	\expandafter
	\endgroup
	\expandafter\def\expandafter#1\expandafter{#1}%
}

\makeatletter
% https://tex.stackexchange.com/questions/33703/extract-x-y-coordinate-of-an-arbitrary-point-in-tikz
\newdimen\@XCoord
\newdimen\@YCoord
\newdimen\XCoord
\newdimen\YCoord
\newcommand*{\ExtractCoordinate}[1]{%
	\getscale{\@scalefactor}%
	\path [transform canvas] (#1); \pgfgetlastxy{\@XCoord}{\@YCoord};%
	\pgfmathsetlength{\XCoord}{\@XCoord}%
	\pgfmathsetlength{\YCoord}{\@YCoord}%
}
\makeatother
% use with \ExtractCoordinate{$(D)$}, then \XCoord

% Another solution:
% https://tex.stackexchange.com/a/58590/284518
\makeatletter
\newcommand{\gettikzxy}[3]{%
	\tikz@scan@one@point\pgfutil@firstofone#1\relax
	\edef#2{\the\pgf@x}%
	\edef#3{\the\pgf@y}%
}
\makeatother
% use with \gettikzxy{(A)}{\ax}{\ay}

% Hatching distance from https://tex.stackexchange.com/a/29367/1952
\makeatletter
\pgfdeclarepattern{
	name=flexible hatch,
	parameters={\hatchdistance,\hatchthickness,\hatchangle},
	bottom left={\pgfpointorigin},
	top right={\pgfpoint{\hatchdistance}{\hatchdistance}},
	tile size={\pgfpoint{\hatchdistance}{\hatchdistance}},
	tile transformation={\pgftransformrotate{\hatchangle}},
	code={
			\begin{pgfscope}
				\pgfsetlinewidth{\hatchthickness}
				\pgfpathmoveto{\pgfpoint{0}{\hatchdistance/2}}
				\pgfpathlineto{\pgfpoint{\hatchdistance}{\hatchdistance/2}}
				\pgfusepath{stroke}
			\end{pgfscope}
		}
}
\tikzset{
	hatch distance/.store in=\hatchdistance,
	hatch distance=6pt,
	hatch thickness/.store in=\hatchthickness,
	hatch thickness=3pt,
	hatch angle/.store in=\hatchangle,
	hatch angle=45,
}
\makeatother

% Find maximum value of a row in a table,and put that in \tempMax macro
% https://tex.stackexchange.com/a/634935
\newcommand{\findMax}[3]{
	\pgfplotstablegetrowsof{#1}
	\pgfmathtruncatemacro\LastRowNo{\pgfplotsretval-1}
	\pgfplotstablesort[sort key={#2}]{\sorted}{#1}
	\pgfplotstablegetelem{\LastRowNo}{#2}\of{\sorted}
	\pgfmathsetmacro{#3}{\pgfplotsretval}}

% Set an auto matrix style
% https://tex.stackexchange.com/a/516077
% \newcommand{\mycolindex}[1]{\ifnum#1=5 N\else #1\fi}
% \newcommand{\myrowindex}[1]{\ifnum#1=5 T\else #1\fi}
\tikzset{cust matrix/.style={
			matrix of nodes, anchor=south,
			draw, thick, inner sep=0pt,
			nodes in empty cells, text=black,
			align=center, text width=20pt,
			%column sep=-0.2pt, row sep=-0.2pt,
			cells={
					nodes={
							minimum width=2.4em, minimum height=2.4em,
							draw, very thin, anchor=center, align=center,
							fill=white, opacity=0.9, inner sep=0}}},
	behindmatrix/.style={
			matrix of nodes,
			draw, thick, inner sep=0pt,
			nodes in empty cells, text=black,
			align=center, text width=16pt,
			column sep=-0.2pt, row sep=-0.2pt,
			cells={
					nodes={
							minimum width=1.9em, minimum height=1.9em,
							draw, very thin, dashed, anchor=center, align=center,
							fill=white, inner sep=0}}}}%,
%                     execute at begin node={%
%     $\vphantom{x_|}\ifnum\the\pgfmatrixcurrentrow<4
%          \ifnum\the\pgfmatrixcurrentcolumn<4
%           {#1}^{\the\pgfmatrixcurrentrow}_{\the\pgfmatrixcurrentcolumn}
%          \else
%           \ifnum\the\pgfmatrixcurrentcolumn=5
%            {#1}^{\the\pgfmatrixcurrentrow}_{N}
%           \fi
%          \fi
%         \else
%          \ifnum\the\pgfmatrixcurrentrow=5
%           \ifnum\the\pgfmatrixcurrentcolumn<4
%            {#1}^{T}_{\the\pgfmatrixcurrentcolumn}
%           \else
%            \ifnum\the\pgfmatrixcurrentcolumn=5
%             {#1}^{T}_{N}
%            \fi
%           \fi
%          \fi
%         \fi
%         \ifnum\the\pgfmatrixcurrentrow\the\pgfmatrixcurrentcolumn=14
%          \cdots
%         \fi
%         \ifnum\the\pgfmatrixcurrentrow\the\pgfmatrixcurrentcolumn=41
%          \vdots
%         \fi
%         \ifnum\the\pgfmatrixcurrentrow\the\pgfmatrixcurrentcolumn=44
%          \ddots
%      \fi$}
%                 }
%             }
%         }
%     }

% Define right angle when using pic from https://tex.stackexchange.com/a/409550
\makeatletter
\tikzset{
	pics/right angle/.style = {
			setup code  = \tikz@lib@angle@parse#1\pgf@stop,
			background code = \tikz@lib@rightangle@background#1\pgf@stop,
			foreground code = \tikz@lib@rightangle@foreground#1\pgf@stop,
		},
	pics/right angle/.default=A--B--C,
	angle eccentricity/.initial=.6,
	angle radius/.initial=5mm
}

\def\tikz@lib@rightangle@background#1--#2--#3\pgf@stop{%
	\path [name prefix ..] [pic actions, draw=none] (#2.center)
	-- ++(\tikz@start@angle@temp:\tikz@lib@angle@rad pt)
	-- ++(\tikz@end@angle@temp:\tikz@lib@angle@rad pt)
	-- ++(\tikz@start@angle@temp:-\tikz@lib@angle@rad pt)
	-- cycle;
}

\def\tikz@lib@rightangle@foreground#1--#2--#3\pgf@stop{%
	\path [name prefix ..] [pic actions, fill=none, shade=none]
	([shift={(\tikz@start@angle@temp:\tikz@lib@angle@rad pt)}]#2.center)
	-- ++(\tikz@end@angle@temp:\tikz@lib@angle@rad pt)
	-- ++(\tikz@start@angle@temp:-\tikz@lib@angle@rad pt);
	\ifx\tikzpictext\relax\else%
		\def\pgf@temp{\node()[name prefix
				..,at={([shift={({.5*\tikz@start@angle@temp+.5*\tikz@end@angle@temp}:\pgfkeysvalueof{/tikz/angle
											eccentricity}*sqrt(1/2)*\tikz@lib@angle@rad pt)}]#2.center)}]}
		\expandafter\pgf@temp\expandafter[\tikzpictextoptions]{\tikzpictext};%
	\fi
}
\makeatother

%verre
\tikzset{verre/.style={draw=SkyBlue,fill=SkyBlue!30}}
% ressort
\tikzset{ressort/.style={thick,gray,smooth}}
% coil
% \tikzset{coilaspect/.store in=\coilaspect, coilaspect=0.3}
% \tikzset{coillength/.store in=\coillength, coillength=1.5mm}
% \tikzset{coilamplit/.store in=\coilamplit, coilamplit=3mm}
\tikzset{
	Coil/.style n args={3}{
			decorate,
			decoration={
					coil, aspect={#1},
					segment length={#2},
					amplitude={#3}
				}
		}
}

% Any node
\tikzset{
	mynode/.style n args={3}{
			postaction=decorate,
			decoration={
					markings,
					mark={at position #1 with \node[#2]{#3};}}}}

\tikzset{%
	flch/.style={%
			/utils/exec=\tikzset{flch arrow/.cd,#1},
			decoration={markings,
					mark= at position \pgfkeysvalueof{/tikz/flch arrow/pos} with
						{\arrow{\pgfkeysvalueof{/tikz/flch arrow/type}[%
									% length=\pgfkeysvalueof{/tikz/flch arrow/length},%
									% width=\pgfkeysvalueof{/tikz/flch arrow/width},%
									scale=\pgfkeysvalueof{/tikz/flch arrow/scale},%
									color=\pgfkeysvalueof{/tikz/flch arrow/color},%
									% opacity=\pgfkeysvalueof{/tikz/flch arrow/opacity}%
								]}}},
			postaction={decorate}
		},
	flch/.default={pos=0.5},
	flch arrow/.is family,
	flch arrow/.cd,
	pos/.initial=0.5,
	% length/.initial=2.5mm,
	% width/.initial=2mm,
	scale/.initial=1,
	color/.initial=,
	% opacity/.initial=1,
	type/.initial=Stealth,
}
%simple flèche
\tikzstyle simplef=[postaction={decorate,
		decoration={markings,
				mark=at position .25 with
					{\arrow[scale=1.5,>=stealth]{>}}}}]

%simple flèche reverse
\tikzstyle simplerev=[postaction={decorate,
		decoration={markings,
				mark=at position .25 with
					{\arrow[scale=1.5,>=stealth]{<}}}}]

%double flèches
\tikzstyle doublef=[postaction={decorate,
		decoration={markings,
				mark=at position .5 with
					{\arrow[scale=1.5,>=stealth]{>>}}}}]

%double flèches reverse
\tikzstyle doublerev=[postaction={decorate,
		decoration={markings,
				mark=at position .5 with
					{\arrow[scale=1.5,
							>=stealth]{<<}}}}]

%triple flèches
\tikzstyle triplef=[postaction={decorate,
		decoration={markings,
				mark=at position .75 with
					{\arrow[scale=1.5,>=stealth]{>>>}}}}]

%triple flèches reverse
\tikzstyle triplerev=[postaction={decorate,
		decoration={markings,
				mark=at position .75 with
					{\arrow[scale=1.5,
							>=stealth]{<<<}}}}]

%simple flèche grande taille
\tikzstyle simplegros=[postaction={decorate,
		decoration={markings,
				mark=at position .25 with
					{\arrow[scale=2,
							>=stealth]{>}}}}]

%simple flèche grande taille reverse
\tikzstyle simplegrosrev=[postaction={decorate,
		decoration={markings,
				mark=at position .25 with
					{\arrow[scale=2,
							>=stealth]{<}}}}]

%double flèches grande taille
\tikzstyle doublegros=[postaction={decorate,
		decoration={markings,
				mark=at position .5 with
					{\arrow[scale=2,
							>=stealth]{>>}}}}]

%double flèche grande taille reverse
\tikzstyle doublegrosrev=[postaction={decorate,
		decoration={markings,
				mark=at position .5 with
					{\arrow[scale=2,
							>=stealth]{<<}}}}]

% node arrow
\tikzset{ndarr/.style={
			single arrow, anchor=center, draw, fill,
			minimum width=2.5mm, minimum height=8mm,
			single arrow head extend=1mm, rotate=#1,
			ndarr/.default={0}
		}
}

%oeil, le paramètre, indiqué entre crochet permettra de positionner
%l'oeil avec un shift, rotate...
\newcommand{\oeil}[1][]{
	\draw[#1,thick,rounded corners] (-15:1)--(0,0)--(15:1);
	\draw[#1] (-15:0.8) arc (-15:15:0.8);
	\draw[#1,fill=black] (0:0.75) ellipse(0.05 and 0.1);}

\newcommand{\sVrot}[1]{
	\ctikzset{sources/symbol/rotate=#1}
}

% For thermo
\colorlet{adia}{BlueViolet!70!black} % Adiabatique : purple
\colorlet{isoT}{green!60!black} % Isotherme : green
\colorlet{isoP}{red!80!black} % IsoP : red
\colorlet{isoV}{blue!80!black} % IsoV : blue

\newcommand{\xtick}[2]{
	\draw[thick]
	(#1)++(0,.1) --++ (0,-.2) node[below=-.5pt,scale=0.9] {#2};
}
\newcommand{\ytick}[2]{
	\draw[thick]
	(#1)++(.1,0) --++ (-.2,0) node[left=-.5pt,scale=0.9] {#2};
}

% For sankey
\sankeyset{%
	new start style={variable arrow}{%
			(\name.left) --++
			(-\arrowvariabledist,0) --
			([xshift=-\arrowvariabledist/6]\name.center) --
			([xshift=-\arrowvariabledist]\name.right) --
			(\name.right) -- cycle%
		}{%
			(\name.left) --++
			(-\arrowvariabledist,0) --
			([xshift=-\arrowvariabledist/6]\name.center) --
			([xshift=-\arrowvariabledist]\name.right) --
			(\name.right)%
		},
	new end style={variable arrow}{%
			(\name.left) --
			([yshift=1mm]\name.left) --
			([xshift=\arrowvariabledist]\name.center) --
			([yshift=-1mm]\name.right) --
			(\name.right) -- cycle%
		}{%
			(\name.left) --
			([yshift=1mm]\name.left) --
			([xshift=\arrowvariabledist]\name.center) --
			([yshift=-1mm]\name.right) --
			(\name.right)
		},
}
\sankeyset{%
	new start style={auto variable arrow}{%
			% \newcommand{\arrowvariabledist}{%
			% 	0.3*\sankeygetnodeqty{\name}%
			% }
			(\name.left) --
			([xshift=-\arrowper*\sankeygetnodeqty{\name}]\name.left) --
			([xshift=-\arrowper*\sankeygetnodeqty{\name}/6]\name.center) --
			([xshift=-\arrowper*\sankeygetnodeqty{\name}]\name.right) --
			(\name.right) -- cycle%
		}{%
			(\name.left) --
			([xshift=-\arrowper*\sankeygetnodeqty{\name}]\name.left) --
			([xshift=-\arrowper*\sankeygetnodeqty{\name}/6]\name.center) --
			([xshift=-\arrowper*\sankeygetnodeqty{\name}]\name.right) --
			(\name.right)%
		},
	new end style={auto variable arrow}{%
			(\name.left) --
			([yshift=1mm]\name.left) --
			([xshift=\arrowper*\sankeygetnodeqty{\name}]\name.center) --
			([yshift=-1mm]\name.right) --
			(\name.right) -- cycle%
		}{%
			(\name.left) --
			([yshift=1mm]\name.left) --
			([xshift=\arrowper*\sankeygetnodeqty{\name}]\name.center) --
			([yshift=-1mm]\name.right) --
			(\name.right)
		},
}
\newcommand\centerlabel[2]{ % valname, label
	\node[anchor=center, align=center]
	at ($(#1-old.center)!0.5!(#1.center)$)
	{#2};
}

%%% Fin du package
\endinput
